import { describe, expect } from 'vitest';
import { test, toWgsl } from './extendedTest.ts';

describe('arrays', () => {
  test('shader generation', ({ gl }) => {
    const glsl = `
      uniform float uFoo[4];

      struct Light {
        vec3 position;
        vec3 color;
      };

      uniform Light u_lights[3];
    `;

    expect(toWgsl(gl, glsl).wgsl).toMatchInlineSnapshot(`
      "// Generated by byegl

      struct Light_0 {
        position: vec3f,
        color: vec3f,
      }

      @group(0) @binding(0) var<uniform> uFoo: array<f32, 4>;
      @group(0) @binding(1) var<uniform> u_lights: array<Light_0, 3>;

      var<private> gl_Position: vec4f;
      var<private> gl_FragColor: vec4f;
      "
    `);
  });
});

describe('for statements', () => {
  test('from 0 to 5', ({ gl }) => {
    const glsl = `
      void main() {
        vec3 color = vec3(0);
        for (int i = 0; i < 4; i++) {
          color += vec3(i, i + 1, i + 2);
        }
      }
    `;

    expect(toWgsl(gl, glsl).wgsl).toMatchInlineSnapshot(`
      "// Generated by byegl




      fn _byegl_fake_fragment_0() {
        var color: vec3f = vec3f(0);
        for (var i: i32 = 0; i < 4; i++) {
          color += vec3f(i, i + 1, i + 2);
        }
      }

      var<private> gl_Position: vec4f;
      var<private> gl_FragColor: vec4f;

      @fragment
      fn _byegl_frag_main_1() -> @location(0) vec4f {
        // Filling proxies with varying data

        _byegl_fake_fragment_0();
        return gl_FragColor;
      }
      "
    `);
  });
});

describe('preprocessor directives', () => {
  test('#if #else #endif', ({ gl }) => {
    const glslTrue = `
#define HELLO

#if defined(HELLO)
uniform float foo;
#else
uniform int foo;
#endif
`;

    const glslFalse = `
#if defined(HELLO)
uniform float foo;
#else
uniform int foo;
#endif
`;

    expect(toWgsl(gl, glslTrue).wgsl).toMatchInlineSnapshot(`
      "// Generated by byegl



      @group(0) @binding(0) var<uniform> foo: f32;

      var<private> gl_Position: vec4f;
      var<private> gl_FragColor: vec4f;
      "
    `);

    expect(toWgsl(gl, glslFalse).wgsl).toMatchInlineSnapshot(`
      "// Generated by byegl



      @group(0) @binding(0) var<uniform> foo: i32;

      var<private> gl_Position: vec4f;
      var<private> gl_FragColor: vec4f;
      "
    `);
  });
});
